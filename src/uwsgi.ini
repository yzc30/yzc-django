 [uwsgi]
 #项目目录
 chdir=/var/www/html/yzc/src
 #指定项目application
 module=src.wsgi:application
 #指定sock的文件路径（nginx使用）
 socket=:8081
 # 进程个数（processess一样效果）
processes = 4
 #指定启动时的pid文件路径
 pidfile=/var/www/script/uwsgi.pid
 #指定ip及端口（配置nginx就不需要单独启动uwsgi需要填写）
;  http=:8080
 #指定静态文件（配置nginx不需要，单独启动uwsgi加载静态文件）
;  static-map=/static=/var/www/html/yzc/src/collect_static
 #启动uwsgi的用户名和用户组
 uid=root
 gid=root
 #启用主进程
 master=true
 # 启用线程
 enable-threads=true
 #自动移除unix Socket和pid文件当服务停止的时候
 vacuum=true
 #设置日志目录
 daemonize=/var/www/script/uwsgi.log
 #不记录信息日志，只记录错误以及uwsgi内部消息
 disable-logging=true
 # 序列化接受的内容，如果可能的话
 thunder-lock=true

; ; 监听的端口
; http = 127.0.0.1:8080

; ; 指定和nginx进行套接字通信的方式：端口或文件
; ; socket = 127.0.0.1:8001
; ; socket = /home/kzzf/project/OfferHelp/OfferHelp.sock


; ; 项目所在目录，和manage.py同级
; chdir = /var/www/html/yzc/src

; ; 虚拟环境所在目录
; home=/var/www/env35/
; PYTHONHOME = /usr/bin/

; ; 主应用中的wsgi文件
; wsgi-file = /var/www/html/yzc/src/src

; ; 使用路由代理静态资源，但失败了
; ; static-safe=/home/kzzf/project/OfferHelp/static/
; ; route = /static/(.*) static:/home/kzzf/project/OfferHelp/static/$1

; ; 代理静态资源：路径映射
; ; static-map = /static=/var/www/html/yzc/src/collect_static

; ; 启动一个master进程，来管理其余的子进程
; master=True
; processes = 4
; threads = 2

; ; 保存主进程的pid，用来控制uwsgi服务
; pidfile=/var/www/html/yzc/src/uwsgi.pid
; ; 启动项目  uwsgi uwsgi.ini
; ; uwsgi --stop/reload xxx.pid  停止/重启uwsgi

; ; 设置后台运行，保存日志
; daemonize=/var/www/html/yzc/src/uwsgi.log
; ; deamonize=1  ; 用来配置background运行

; ; 设置每个工作进程处理请求的上限，达到上限时，将回收（重启）该进程。可以预防内存泄漏
; max-requests=5000

; # 服务停止时自动移除unix Socket和pid文件
; vacuum=true


